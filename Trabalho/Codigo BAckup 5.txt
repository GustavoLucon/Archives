package RML;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.Socket;
import java.security.Security;
import java.util.Properties;

import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.net.SocketFactory;
import javax.net.ssl.SSLSocketFactory;

import com.sun.xml.internal.messaging.saaj.packaging.mime.MessagingException;

public class Email {
	public static class SendMailUsingGmail {
		//Programa Feito Por Gustavo Pestana Lucon
	
		private static String SMTP_HOST_NAME =
		"";

		private static final String SMTP_PORT = "465";
		private static String emailMsgTxt =
		"";
		

		private static String emailSubjectTxt =
	"";

		private static String emailFromAddress =
		"";

		private static final String SSL_FACTORY =
		"javax.net.ssl.SSLSocketFactory";
		
		private static String[] sendTo = {""};

		public static void main(String args[]) throws Exception {
			String [] ReceberArquivo = ImportarEmail("C:/Mail/RML-MAIL.TXT");
			SMTP_HOST_NAME = ReceberArquivo[1];
			emailFromAddress = ReceberArquivo[4];
			emailSubjectTxt = ReceberArquivo[6];
			sendTo = PreencherSoComStrings(ReceberArquivo);
			emailMsgTxt = ReceberArquivo[9];

			Security.addProvider(
		new com.sun.net.ssl.internal.ssl.Provider());

		new SendMailUsingGmail().sendSSLMessage(sendTo, emailSubjectTxt, emailMsgTxt, emailFromAddress,ReceberArquivo[2],ReceberArquivo[3],ReceberArquivo[6],ReceberArquivo[8]);

		}
		// limpar campo de emails
		private static String[] PreencherSoComStrings(String[] teste) {
			int cont = 0;
			int altura=0;
			String palavra  = "";
			String b[] = teste[7].split("");
			for(int a = 0 ;a < b.length;a++)
			{
				if(b[a].equals(","))
				{
					cont++;
				}
			}
			
			String limpo[] = new String[cont];
			for(int a = 0 ;a < b.length;a++)
			{
				if(b[a].equals(","))
				{
					limpo[altura] = palavra;
					palavra = "";
					altura++;		
				}
				else
				{
					palavra = palavra + b[a];
				}
			}
			return limpo;
		}

		public void sendSSLMessage(String recipients[], String subject,
		String message, String from,final String Login , final String Senha  ,final String Apelido, String Anexo) throws MessagingException {

		Properties props = new Properties();
		props.put("mail.smtp.host", SMTP_HOST_NAME);
		props.put("mail.smtp.auth", "true");
		props.put("mail.smtp.port", SMTP_PORT);
		props.put("mail.smtp.socketFactory.port", SMTP_PORT);
		if(SMTP_HOST_NAME.contains("smtp.oi.com.br") == false)
		{
		props.put("mail.smtp.socketFactory.class", SSL_FACTORY);
		}
		props.put("mail.smtp.socketFactory.fallback", "true");
		Session session = Session.getDefaultInstance(props,
		new javax.mail.Authenticator() {
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication
				(Login,Senha);
				}
		}
		);

	
		Message msg = new MimeMessage(session);
		try {
		if(Anexo != "")
		{
		msg.setFileName(Anexo);
		}
		InternetAddress addressFrom = new InternetAddress(from);
		try {
			addressFrom.setPersonal(Apelido);
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
		msg.setFrom(addressFrom);
		InternetAddress[] addressTo =	new InternetAddress[recipients.length];

		for (int i = 0; i < recipients.length; i++) {
		addressTo[i] = new InternetAddress(recipients[i]);
		
		}
		
		msg.setRecipients(Message.RecipientType.TO, addressTo);
		
		// Assunto e conteudo
		msg.setSubject(subject);
		msg.setContent(message, "text/plain");
		Transport.send(msg);
		} catch (javax.mail.MessagingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		}
		
		//Importa o Arquivo Combinado #1# smtp 2- login 3 - senha 4 Enviante 5- apelido 6 - assunto 7 - destinatarios 8 - anexos 9 - texto
		private static String[] ImportarEmail(String Caminho) { 
			String[] Vetor = new String[10];
			
		       Vetor = PreencherVetor(Vetor);
		       try {  
		          BufferedReader leitor = new BufferedReader(new FileReader(Caminho));
		          String linhas;
		          linhas = leitor.readLine();
		          String palavra = "";
		          int cont = 0 ;
		          int i = 0 ;
		          int a = 0 ;
		          String[] b= linhas.split("");
		   
		          while (linhas != null) 
		          {  
		        	  b= linhas.split("");
		        			if(b.length > a)
		        			{
		        			if(b[1].equals("#")&& b[2].equals("1")&& b[3].equals("#"))
		        			{
		        				if(a == 1)
		        				{
		        				a=4;
		        				}
		        				Vetor[1] = Vetor[1] + b[a];
		        			}
		        			else if(b[1].equals("#")&& b[2].equals("2")&& b[3].equals("#"))
		        			{
		        				if(a == 1)
		        				{
		        				a=4;
		        				}
		        				Vetor[2] = Vetor[2] + b[a];
		        			}
		        			else if(b[1].equals("#")&& b[2].equals("3")&& b[3].equals("#"))
		        			{
		        				if(a == 1)
		        				{
		        				a=4;
		        				}
		        				Vetor[3] = Vetor[3] + b[a];
		        			}
		        			else if(b[1].equals("#")&& b[2].equals("4")&& b[3].equals("#"))
		        			{
		        				if(a == 1)
		        				{
		        				a=4;
		        				}
		        				Vetor[4] = Vetor[4] + b[a];
		        			}
		        			else if(b[1].equals("#")&& b[2].equals("5")&& b[3].equals("#"))
		        			{
		        				if(a == 1)
		        				{
		        				a=4;
		        				}
		        				Vetor[5] = Vetor[5] + b[a];
		        			}
		        			else if(b[1].equals("#")&& b[2].equals("6")&& b[3].equals("#"))
		        			{
		        				if(a == 1)
		        				{
		        				a=4;
		        				}
		        				Vetor[6] = Vetor[6] + b[a];
		        			}
		        			else if(b[1].equals("#")&& b[2].equals("7")&& b[3].equals("#"))
		        			{
		        				if(a == 1)
		        				{
		        				a=4;
		        				}
		        				if(b[a].equals(",") == false)
			        			{
			        				palavra = palavra + b[a];
			        			}
			        			else
			        			{
			        				Vetor[7]= palavra + ","+ Vetor[7];
			        				palavra = "";
			        				cont++;
			        			}
		        			}
		        			else if(b[1].equals("#")&& b[2].equals("8")&& b[3].equals("#"))
		        			{
		        				if(b[a].equalsIgnoreCase("8æ"))
		        				{
		        				if(a == 1)
		        				{
		        				a=4;
		        				}
		        				Vetor[8] = Vetor[8] + b[a];
		        				}
		        			}
		        			else if(b[1].equals("#")&& b[2].equals("9")&& b[3].equals("#"))
		        			{
		        				if(a == 1)
		        				{
		        				a=4;
		        				}
		        				if(b[a].equals(";"))
		        						{
		        				Vetor[9] = Vetor[9] + " \n ";
		        						}
		        				else
		        				{
		        					Vetor[9] = Vetor[9] + b[a];
		        				}
		        			}
		        			
		        			i++;
		        			
		        			}
		        			else
		        			{
							i=0;
							a=0;
							linhas = leitor.readLine();

		        			}
		        			a++;
		    			}  
		        		
		        	    
		        	            leitor.close();  
		        	             
		        	     
		        	         } catch (Exception e) {  
		        	        	 System.out.println("Arquivo Não Encontrado");  
		        	        }
		      return Vetor;                                
		
	}
		private static String[] PreencherVetor(String[] vetor) {
			for (int i = 0 ;i< vetor.length;i++)
			{
					vetor[i]="";
			}
			return vetor;
		}	
	}
}
